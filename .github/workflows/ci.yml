# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']

jobs:
  build:
    runs-on: ubuntu-latest
    container: python:3.11-slim
    # Required services
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Environment variables to set default database, username, and password
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: mydatabase
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd "pg_isready -U myuser"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip==24.0 setuptools==75.1.0 poetry
          python -m pip install poetry
          poetry config virtualenvs.create false
          poetry install
      - name: Linting
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 service tests --count --select=E9,F63,F7,F82 --show-source --statistics
          # test for complexity. The GitHub editor is 127 chars wide
          flake8 service tests --count --max-complexity=10 --max-line-length=127 --statistics
          # Run pylint to catch other PEP8 errors
          pylint service tests --max-line-length=127
      - name: Run unit tests with PyTest
        run: pytest --pspec --cov=service --cov-report=xml --cov-fail-under=95
        env:
          DATABASE_URI: 'postgresql://myuser:mypassword@postgres:5432/mydatabase'
